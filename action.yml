name: Cycle Five Fork - Setup PostgreSQL for Linux/macOS/Windows
author: Ihor Kalnytskyi
description: Setup a preinstalled PostgreSQL server.
branding:
  icon: database
  color: purple
inputs:
  username:
    description: The username of the user to setup.
    default: postgres
    required: false
  password:
    description: The password of the user to setup.
    default: postgres
    required: false
  database:
    description: The database name to setup and grant permissions to created user.
    default: postgres
    required: false
  port:
    description: The server port to listen on.
    default: "5432"
    required: false
  postgres-version:
    description: The PostgreSQL version (major) to install. E.g. "13" or "14".
    default: "15"
    required: false
outputs:
  connection-uri:
    description: The connection URI to connect to PostgreSQL.
    value: ${{ steps.set-outputs.outputs.connection-uri }}
  service-name:
    description: The service name with connection parameters.
    value: ${{ steps.set-outputs.outputs.service-name }}
runs:
  using: composite
  steps:
    - name: Install PostgreSQL
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" \
            | sudo tee /etc/apt/sources.list.d/pgdg.list
          wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
          sudo apt-get update
          sudo apt-get -y install postgresql-${{ inputs.postgres-version }}

          # Add PostgreSQL binaries to PATH, so they become globally available.
          /usr/lib/postgresql/${{ inputs.postgres-version }}/bin/pg_config --bindir >> $GITHUB_PATH

        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew install postgresql@${{ inputs.postgres-version }}

          # Link PostgreSQL binaries to /usr/local/bin so they become globally
          # available. The overwrite option is required because they might be a
          # preinstalled linked bottle.
          brew link --overwrite postgresql@${{ inputs.postgres-version }}

        elif [ "$RUNNER_OS" == "Windows" ]; then
          # FIXME: Aargh! For reasons unknown the '--servicename' option is
          # ignored when installing a PostgreSQL version that is already
          # preinstalled on GitHub runners. In order to bypass the issue I'm
          # using default naming convention (i.e. with arch in the name).
          choco install postgresql${{ inputs.postgres-version }} \
            --ia "--servicename postgresql-${{ runner.arch }}-${{ inputs.postgres-version }}"

          # Stop PostgreSQL that has been auto started after installation. This
          # action prepares new configuration and brings its own instance, and
          # we need a network port to be free.
          net stop postgresql-${{ runner.arch }}-${{ inputs.postgres-version }}

          # Add PostgreSQL binaries to PATH, so they become globally available
          # and set path to LIBPQ to link against. On Windows it comes together
          # with PostgreSQL distribution.
          export PGROOT="$PROGRAMFILES/PostgreSQL/${{ inputs.postgres-version }}"
          "$PGROOT"/bin/pg_config.exe --bindir >> $GITHUB_PATH
          echo "PQ_LIB_DIR=$("$PGROOT"/bin/pg_config.exe --libdir)" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Setup and start PostgreSQL
      run: |
        export PGDATA="$RUNNER_TEMP/pgdata"
        export PWFILE="$RUNNER_TEMP/pwfile"

        # Unfortunately 'initdb' could only receive a password via file on disk
        # or prompt to enter on. Prompting is not an option since we're running
        # in non-interactive mode.
        echo '${{ inputs.password }}' > $PWFILE

        # There are couple of reasons why we need to create a new PostgreSQL
        # database cluster. First and foremost, we have to create a superuser
        # with provided credentials. Second, we want the PostgreSQL client
        # applications [1] to be available for execution without
        # run-from-another-user dances. Third, we want to make sure that
        # settings are the same between operating systems and aren't changed by
        # package vendors.
        #
        # [1] https://www.postgresql.org/docs/15/reference-client.html
        initdb \
          --username="${{ inputs.username }}" \
          --pwfile="$PWFILE" \
          --auth="scram-sha-256" \
          --encoding="UTF-8" \
          --locale="en_US.UTF-8"

        # Do not create unix sockets since they are created by default in the
        # directory we have no permissions to (owned by system postgres user).
        echo "unix_socket_directories = ''" >> "$PGDATA/postgresql.conf"
        echo "port = ${{ inputs.port }}" >> "$PGDATA/postgresql.conf"
        pg_ctl start

        # Save required connection parameters for created superuser to the
        # connection service file [1]. This allows using these connection
        # parameters by setting 'PGSERVICE' environment variable or by
        # requesting them via connection string.
        #
        # HOST is required for Linux/macOS because these OS-es default to unix
        # sockets but we turned them off.
        #
        # PORT, USER, PASSWORD and DBNAME are required because they could be
        # parametrized via action input parameters.
        #
        # [1] https://www.postgresql.org/docs/15/libpq-pgservice.html
        cat <<EOF > "$PGDATA/pg_service.conf"
        [${{ inputs.username }}]
        host=localhost
        port=${{ inputs.port }}
        user=${{ inputs.username }}
        password=${{ inputs.password }}
        dbname=${{ inputs.database }}
        EOF
      shell: bash

    - name: Setup PostgreSQL database
      run: |
        # The 'postgres' database is a pre-created database meant for use by
        # users, utilities and third party applications. There's no way to
        # parametrize the name, so all we can do is to avoid creating a
        # database if provided name is 'postgres'.
        if [ "${{ inputs.database }}" != "postgres" ]; then
          createdb -O "${{ inputs.username }}" "${{ inputs.database }}"
        fi
      env:
        PGSERVICE: ${{ inputs.username }}
      shell: bash

    - name: Set action outputs
      run: |
        CONNECTION_URI="postgresql://${{ inputs.username }}:${{ inputs.password }}@localhost:${{ inputs.port }}/${{ inputs.database }}"

        echo "connection-uri=$CONNECTION_URI" >> $GITHUB_OUTPUT
        echo "service-name=${{ inputs.username }}" >> $GITHUB_OUTPUT
      shell: bash
      id: set-outputs
